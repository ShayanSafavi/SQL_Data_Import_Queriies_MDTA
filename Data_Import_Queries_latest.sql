/* Data Import Queries - In Notepad++, click View - Fold All to view only the attribute names. */

begin CREATE_INVENTORY
CREATE MATERIALIZED VIEW "PAV_CONHIST"."RC_SECTION_MVIEW" ("GLOBAL_ROUTE_ID", "SUB_ROUTE_ID", "ROUTEID", "FACILITY", "BEGIN_STATION", "END_STATION", "DIRECTION") AS 
  SELECT  global_route_id, sub_route_id, routeid,
COUNTY||'-'||SEC.ASSOCIATED_ID_PREFIX||' '||SEC.RNUM||TRIM(SEC.RSUFF)||
(CASE WHEN exit_number IS NOT NULL THEN ' '||sec.route||sec.ramp_number||'-'||sec.exit_number ELSE null END) facility,
MIN(inv_bmp) begin_station,
MAX(inv_emp) end_station,
direction
FROM section_table@pav_conhist_assetdev sec
WHERE  HMIS_YEAR = 2016
AND (nhs_code <> 0
OR govt_control IN (1,31))
GROUP BY global_route_id,sub_route_id, routeid,
COUNTY||'-'||SEC.ASSOCIATED_ID_PREFIX||' '||SEC.RNUM||TRIM(SEC.RSUFF)||
(CASE WHEN exit_number IS NOT NULL THEN ' '||sec.route||sec.ramp_number||'-'||sec.exit_number ELSE NULL END),
direction
ORDER BY 1,4,2;
end CREATE_INVENTORY

begin NETWORK_DEFINITION
/* NETWORK_DEFINITION (Linear Network Definition / inventory)
   Update HMIS_YEAR in RC_SECTION_MVIEW before data import */
SELECT FACILITY AS ROUTES, 
MIN(BEGIN_STATION) AS BEGIN_STATION, 
MAX(END_STATION) AS END_STATION,
DIRECTION
FROM RC_SECTION_MVIEW 
GROUP BY FACILITY, DIRECTION
ORDER BY FACILITY, DIRECTION
end NETWORK_DEFINITION

begin INV_CHANGE
/* INV_CHANGE - Store the inventory change log in this attribute.
   This is not needed for the optimization but it's good to have this data stored somewhere 
   just to keep track of changes in the inventory every year.
   See \\shahanpmdata1\pmdatprg\Aditya\Optimization Process Updates 2016\Route Section Definition 2017\
   Existing vs New RC Route Definition MM-DD-2017.xlsx for more info... */
  end INV_CHANGE ;
 
begin DIR_BMP/DIR_EMP
/* DIR_BMP and DIR_EMP - Import from SECTION_TABLE */   
end DIR_BMP/DIR_EMP;
   
begin AADT 
/* AADT - skip since we don't have 2017 inventory data - last imported 02/14/2018 */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
DIR_AADT AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  DIR_AADT
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.DIR_AADT,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN ABS(SEC.DIR_AADT - (LAG(SEC.DIR_AADT) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP))) > 0 THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.DIR_AADT>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, DIR_AADT
ORDER BY 1,4,2
end AADT;

begin SPEED_LIMIT 
/* SPEED_LIMIT - skip since we don't have 2017 inventory data */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
SPEED_LIMIT AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  SPEED_LIMIT
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.SPEED_LIMIT,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN ABS(SEC.SPEED_LIMIT - (LAG(SEC.SPEED_LIMIT) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP))) > 0 THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.SPEED_LIMIT>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, SPEED_LIMIT
ORDER BY 1,4,2
end SPEED_LIMIT;

begin NHS_CODE
/* NHS_CODE - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
NHS_CODE AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  NHS_CODE
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.NHS_CODE,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.NHS_CODE <> (LAG(SEC.NHS_CODE) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.NHS_CODE>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, NHS_CODE
ORDER BY 1,4,2
end NHS_CODE;

begin FUNC_CLASS
/* FUNC_CLASS  - skip since we don't have 2017 inventory data 
   (last imported 12/13/2018) fixed sections with func_cl = 0*/
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
FUNC_CL AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  FUNC_CL
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.FUNC_CL,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.FUNC_CL <> (LAG(SEC.FUNC_CL) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.FUNC_CL>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, FUNC_CL
ORDER BY 1,4,2
end FUNC_CLASS;

begin ROAD_NAME
/* ROAD_NAME - skip since we don't have 2017 inventory data - Last imported 02/13/2018 */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
ROAD_NAME AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  ROAD_NAME
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.ROAD_NAME,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.ROAD_NAME <> (LAG(SEC.ROAD_NAME) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.ROAD_NAME IS NOT NULL)    
    )
GROUP BY FACILITY, DIRECTION, PART, ROAD_NAME
ORDER BY 1,4,2
end ROAD_NAME;

begin FC_CATEGORY
/* FC_CATEGORY - skip since we don't have 2017 inventory data  
   Derived from FUNC_CLASS, so import that first (Added FC 18 in category 3 and FC 3 in category 2 - last imported 02/13/2018) */
SELECT ROUTES,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  DATE_,
  CASE
    WHEN DATA_ IN (1,11,12)
    THEN 1
    WHEN DATA_ IN (2,3,6,7,14,16)
    THEN 2
    WHEN DATA_ IN (8,9,17,18,19)
    THEN 3
  END DATA_
FROM FUNC_CLASS
WHERE EXTRACT(YEAR FROM DATE_) = 2016
end FC_CATEGORY;

begin GOVT_CONTROL
/* GOVT_CONTROL - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
GOVT_CONTROL AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  GOVT_CONTROL
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.GOVT_CONTROL,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.GOVT_CONTROL <> (LAG(SEC.GOVT_CONTROL) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.GOVT_CONTROL>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, GOVT_CONTROL
ORDER BY 1,4,2
end GOVT_CONTROL;

begin MAIN_LINE
/* MAIN_LINE - skip since we don't have 2017 inventory data - last imported 02-13-2018 */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
MAIN_LINE AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  MAIN_LINE
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.MAIN_LINE,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.MAIN_LINE <> (LAG(SEC.MAIN_LINE) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.MAIN_LINE>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, MAIN_LINE
ORDER BY 1,4,2
end MAIN_LINE;

begin PROPOSED
/* PROPOSED - skip since we don't have 2017 inventory data - last imported 02-13-2018 */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
PROPOSED AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  PROPOSED
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.PROPOSED,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.PROPOSED <> (LAG(SEC.PROPOSED) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.PROPOSED>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, PROPOSED
ORDER BY 1,4,2
end PROPOSED;

begin ROAD_CLASS
/* ROAD_CLASS - skip since we don't have 2017 inventory data (last imported 02/13/2018) 
   R = Rural; U = Urban 
   For more info, SELECT * FROM PAVCORE.LU_FUNC_CLASS; */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
CASE WHEN FUNC_CL<10 THEN 'R' ELSE 'U' END DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  FUNC_CL
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.FUNC_CL,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.FUNC_CL <> (LAG(SEC.FUNC_CL) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.FUNC_CL>=0)    
    )
    GROUP BY FACILITY, DIRECTION, PART, FUNC_CL
    ORDER BY 1,4,2
end ROAD_CLASS;

begin SHOP
/* SHOP - skip since we don't have 2017 inventory data (last imported 02/13/2018) 
   For more info, SELECT * FROM LU_SHOP;
   Avoid using apostrophes, reserved words and key words */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
SHOP_NAME AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  SHOP_NAME
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      CASE WHEN UPPER(LU.SHOP_NAME) = 'UPPER MARLBORO' THEN 'MARLBORO'   
      WHEN UPPER(LU.SHOP_NAME) LIKE '%KEYSER%' THEN 'KEYSERS RIDGE' 
      ELSE UPPER(LU.SHOP_NAME) END SHOP_NAME,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.MAINT_SHOP <> (LAG(SEC.MAINT_SHOP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
    FROM SECTION_TABLE SEC, RC_SECTION_MVIEW RC, LU_SHOP LU    
    WHERE RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND SEC.MAINT_SHOP = LU.MAINT_SHOP
    AND LU.SHOP_NAME IS NOT NULL
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    AND SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.MAINT_SHOP>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, SHOP_NAME
ORDER BY 1,4,2
end SHOP;

begin DIVIDED
/* DIVIDED - skip since we don't have 2017 inventory data (last imported 02/13/2018) 
   MEDIAN_TYPE #4 = 'None (Undiv)', #5 = Center Tla (Undiv)
   For more info, SELECT * FROM PAVCORE.LU_MEDIAN_TYPE; */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
CASE WHEN MEDIAN_TYPE IN (4,5) THEN 'UNDIVIDED' ELSE 'DIVIDED' END DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  MEDIAN_TYPE
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.MEDIAN_TYPE,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.MEDIAN_TYPE <> (LAG(SEC.MEDIAN_TYPE) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    AND SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.MEDIAN_TYPE>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, MEDIAN_TYPE
ORDER BY 1,4,2
end DIVIDED;

begin DIR_LANES
/* DIR_LANES - skip since we don't have 2017 inventory data - New query created on 09-21-2017, last imported 02-13-2018.
   import from pavconhist_assetdev */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
DIR_LANES AS DATA_
FROM
(
  SELECT FACILITY, 
    INV_BMP,
    INV_EMP,
    DIRECTION,
    SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
    DIR_LANES
    FROM
    (   
     SELECT
      FACILITY,
      INV_BMP,
      INV_EMP,
      DIRECTION ,
      DIR_LANES,
      CASE       
        WHEN FACILITY <> LAG(FACILITY) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP) THEN 0  
        WHEN DIRECTION <> LAG(DIRECTION) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP) THEN 0  
        WHEN DIR_LANES <> (LAG(DIR_LANES) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP)) THEN 1
        WHEN INV_BMP - (LAG(INV_EMP) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP)) > 0 THEN 1
        ELSE 0
      END GRP      
    FROM 
    (
    SELECT DISTINCT RC.GLOBAL_ROUTE_ID,
      RC.FACILITY,
      INV_BMP,
      INV_EMP,
      RC.DIRECTION ,
      TOTAL_LANES_THRU+ TOTAL_LANES_AUX AS DIR_LANES
    FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.DIRECTION      = SEC.DIRECTION
    AND SEC.HMIS_YEAR    = 2016)
    ) 
)
GROUP BY FACILITY, DIRECTION, PART, DIR_LANES
ORDER BY 1,4,2
end DIR_LANES;

begin DIR_MILES 
/* DIR_MILES --> same as [LENGTH] - use final segmentation to calculate directional miles for each section*/

-- change network name to find NetworkID.
select * from networks where network_name = 'TEST_NETWORK_W10';

-- Import query - make sure to change segment and section tables...
SELECT 
 SEC.FACILITY AS ROUTES, 
 SEC.BEGIN_STATION, 
 SEC.END_STATION, 
 SEC.DIRECTION, 
 '06/30/2017' AS DATE_,
 SEC.END_STATION - SEC.BEGIN_STATION AS DATA_ 
FROM SEGMENT_1931_NS0 SEG
INNER JOIN SECTION_1931 SEC
 ON SEC.SECTIONID = SEG.SECTIONID
 ORDER BY 1,4,2

end DIR_MILES;

begin CODE
/* CODE (County Code) - skip since we don't have 2017 inventory data (last imported 02/13/2018) 
   For more information, SELECT * FROM PAVCORE.LU_COUNTY; */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION, 
 '06/30/2017' AS DATE_,
 CO.CODE AS DATA_
FROM RC_SECTION_MVIEW RC
INNER JOIN PAVCORE.LU_COUNTY CO
 ON SUBSTR(RC.FACILITY,1,2) = CO.COUNTY_CODE
end CODE;
 
begin COUNTY 
/* COUNTY - skip since we don't have 2017 inventory data (last imported 02/13/2018) 
   For more info, SELECT * FROM PAVCORE.LU_COUNTY; */
SELECT DISTINCT 
 FACILITY AS ROUTES,
 BEGIN_STATION,
 END_STATION,
 DIRECTION, 
 '06/30/2017' AS DATE_,
 SUBSTR(FACILITY,1,2) AS DATA_
FROM RC_SECTION_MVIEW
end COUNTY;
	
begin DISTRICT	
/* DISTRICT - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION, 
 '06/30/2017' AS DATE_,
 CO.DISTRICT AS DATA_
FROM RC_SECTION_MVIEW RC
INNER JOIN PAVCORE.LU_COUNTY CO
 ON SUBSTR(RC.FACILITY,1,2) = CO.COUNTY_CODE
end DISTRICT;

begin REGION	  
/* REGION - skip since we don't have 2017 inventory data
  (1 = Mountain, 2 = Central, 3 = Coastal; last imported 02/13/2018) */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION, 
 '06/30/2017' AS DATE_,
 CO.REGION AS DATA_
FROM RC_SECTION_MVIEW RC
INNER JOIN PAVCORE.LU_COUNTY CO
 ON SUBSTR(RC.FACILITY,1,2) = CO.COUNTY_CODE
end REGION;
    
begin ROUTE	
/* ROUTE or ASSOCIATED_ID_PREFIX - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION, 
 '06/30/2017' AS DATE_,
CASE WHEN SEC.ROUTE = 'RP' THEN SEC.ASSOCIATED_ID_PREFIX ELSE SEC.ROUTE END DATA_
 FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
 ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
 AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
end ROUTE;	  

begin RNUM	  
/* RNUM - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION,
 '06/30/2017' AS DATE_, 
 RNUM AS DATA_
FROM SECTION_TABLE SEC
 INNER JOIN RC_SECTION_MVIEW RC
 ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
 AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
end RNUM;

begin RSUFF	  
/* RSUFF - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT RC.FACILITY AS ROUTES,
  RC.BEGIN_STATION,
  RC.END_STATION,
  RC.DIRECTION,
  '06/30/2017' AS DATE_,
  SEC.RSUFF AS DATA_
FROM SECTION_TABLE SEC
 INNER JOIN RC_SECTION_MVIEW RC
 ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
 AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.RSUFF IS NOT NULL
 AND SEC.HMIS_YEAR = 2016
end RSUFF;
 
begin ISRAMP 
/* ISRAMP - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION, 
 '06/30/2017' AS DATE_,
CASE WHEN RC.FACILITY LIKE '%RP%' THEN 1 ELSE 0 END DATA_
 FROM RC_SECTION_MVIEW RC
end ISRAMP;

begin RAMP_NUMBER
/* RAMP_NUMBER - skip since we don't have 2017 inventory data - added & last imported 02/13/2018 */     
SELECT DISTINCT 
 RC.FACILITY AS ROUTES,
 RC.BEGIN_STATION,
 RC.END_STATION,
 RC.DIRECTION,
 '06/30/2017' AS DATE_, 
 SEC.RAMP_NUMBER AS DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
AND SEC.ROUTE = 'RP'
end RAMP_NUMBER;
	  
begin EXIT_NUMBER
/* EXIT_NUMBER - skip since we don't have 2017 inventory data - added & last imported 02/13/2018 */     
SELECT DISTINCT 
  RC.FACILITY AS ROUTES,
  RC.BEGIN_STATION,
  RC.END_STATION,
  RC.DIRECTION,
  '06/30/2017' AS DATE_, 
  SEC.EXIT_NUMBER AS DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
AND SEC.ROUTE = 'RP'
end EXIT_NUMBER;
	  
begin USE_AS_PRIMARY
/* USE_AS_PRIMARY (DIRECTION) - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
  RC.FACILITY AS ROUTES,
  RC.BEGIN_STATION,
  RC.END_STATION,
  RC.DIRECTION, 
  '06/30/2017' AS DATE_,
  USE_AS_PRIMARY AS DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
end USE_AS_PRIMARY;

begin PRIMARY_DIRECTION
/* PRIMARY_DIRECTION - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT DISTINCT 
  RC.FACILITY AS ROUTES,
  RC.BEGIN_STATION,
  RC.END_STATION,
  RC.DIRECTION, 
  '06/30/2017' AS DATE_,
  CASE 
   WHEN SEC.USE_AS_PRIMARY = 0 AND RC.DIRECTION = 'E' THEN 'W'  
   WHEN SEC.USE_AS_PRIMARY = 0 AND RC.DIRECTION = 'W' THEN 'E'
   WHEN SEC.USE_AS_PRIMARY = 0 AND RC.DIRECTION = 'N' THEN 'S'
   WHEN SEC.USE_AS_PRIMARY = 0 AND RC.DIRECTION = 'S' THEN 'N'
   ELSE RC.DIRECTION
   END DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
ORDER BY 1,4,2
end PRIMARY_DIRECTION;
	
begin SHOULDER_WIDTH
/* SHOULDER_WIDTH - skip since we don't have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
SHLD_WIDTH AS DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  SHLD_WIDTH
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.SHLD_WIDTH,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.SHLD_WIDTH <> (LAG(SEC.SHLD_WIDTH) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.SHLD_WIDTH>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, SHLD_WIDTH
ORDER BY 1,4,2
end SHOULDER_WIDTH;

begin ISCONHIST
/* ISCONHIST - connection RC dev (derived from LAST_TREATMENT or LAST_YEAR, so import that first) - imported 07-02-2019 */
SELECT ROUTES,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  DATE_,
  1 AS DATA_
FROM LAST_TREATMENT
WHERE EXTRACT(YEAR FROM DATE_) = 2018
end ISCONHIST;

begin AGE - imported 07-26-2021
/* AGE – (new query from pavconhist_prod.business_plan_treatments - last imported 11/10/2017) 
  case statement - Don’t want age to be -1 when the birth year is 2017 so make it zero. */
WITH A AS
  (SELECT *
  FROM BUSINESS_PLAN_TREATMENTS BPT,
    LU_TREATMENT TRT
  WHERE UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
  AND (BPT.TREATMENT NOT IN ('UNKNOWN', 'SLURRY SEAL'))
  and OUTER_LANE =1
  UNION
  SELECT *
  FROM BUSINESS_PLAN_TREATMENTS BPT,
    LU_TREATMENT TRT
  WHERE UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
  AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
    and OUTER_LANE =1
  ),
  B AS
  (SELECT A.SECTION_ID,
    MAX(A.ID_) MAX_ID
  FROM A
  WHERE A.AGE_RESET = 1
  GROUP BY A.SECTION_ID
  )
SELECT INV.FACILITY AS ROUTES,
  CON.BMP AS BEGIN_STATION,
  CON.EMP AS END_STATION,
  INV.DIRECTION,
  '06/30/2020' AS DATE_,
    CASE WHEN 2020 - TO_NUMBER(SUBSTR(CON.BIRTH_YEAR,-4,4)) < 0 THEN 0 
     ELSE 2020 - TO_NUMBER(SUBSTR(CON.BIRTH_YEAR,-4,4)) END DATA_
FROM RC_SECTION_MVIEW INV,
  BUSINESS_PLAN_TREATMENTS CON,
  B
WHERE INV.GLOBAL_ROUTE_ID = CON.GLOBAL_ROUTE_ID
AND INV.DIRECTION = CON.DIRECTION
AND B.SECTION_ID = CON.SECTION_ID
AND B.MAX_ID = CON.ID_
AND CON.BIRTH_YEAR<>'UNKNOWN'
ORDER BY 2,5,3
end AGE;

begin AGE_GROUPS - dont need this anymore
/* AGE_GROUPS - Delete existing data in this attribute as this is used for segmentation
	(derived from AGE, so import that first)  – imported 07/02/19
	The most recent AGE data should not have any overlapping segments.  
	Exclude or fix those records before running this query.  
	For the DATA_ field, start with a value of 1 for each route and then increment by 1 
	when the age difference between consecutive segments is 5 years.  */
SELECT 
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
DATE_,
SUM (GRP) OVER (PARTITION BY ROUTES ORDER BY ROUTES, DIRECTION, BEGIN_STATION) + 1 AS DATA_
FROM
(SELECT 
  ROUTES,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  DATE_,
  DATA_,
  CASE       
   WHEN ROUTES <> LAG(ROUTES) OVER (ORDER BY ROUTES, DIRECTION, BEGIN_STATION) THEN 0  
   WHEN ABS(DATA_- (LAG(DATA_) OVER (ORDER BY ROUTES, DIRECTION, BEGIN_STATION))) > 5 THEN 1
   ELSE 0 
   END GRP
  FROM AGE
  WHERE EXTRACT(YEAR FROM DATE_) = 2018
  ORDER BY ROUTES, DIRECTION, BEGIN_STATION) 
ORDER BY ROUTES, DIRECTION, BEGIN_STATION
end AGE_GROUPS;

begin LAST_YEAR - imported 07-26-2021
/* LAST_YEAR – new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 10/17/2017 */			
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
MAX(BIRTH_YEAR) AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A
  WHERE AGE_RESET = 1
  GROUP BY SECTION_ID)             
              SELECT BPT.COUNTY 
              ||'-' 
              ||BPT.ASSOCIATED_ID_PREFIX 
              || ' ' 
              ||BPT.ID_RTE_NO 
              ||BPT.MP_SUFFIX AS ROUTES,
              BPT.BMP AS BEGIN_STATION,
              BPT.EMP AS END_STATION,
              BPT.DIRECTION,
              BPT.BIRTH_YEAR
              FROM BUSINESS_PLAN_TREATMENTS BPT, B
              WHERE B.SECTION_ID = BPT.SECTION_ID
              AND B.MAX_ID = BPT.ID_
              AND BPT.EXIT_NUMBER IS NULL
              
              UNION --ramps
              
              SELECT BPT.COUNTY 
              || '-' 
              ||BPT.ASSOCIATED_ID_PREFIX 
              || ' ' 
              || BPT.ID_RTE_NO 
              || BPT.MP_SUFFIX  
              ||' RP' 
              || BPT.RAMP_NUMBER 
              ||'-'
              ||BPT.EXIT_NUMBER AS ROUTES,
              BPT.BMP AS BEGIN_STATION,
              BPT.EMP AS END_STATION,
              BPT.DIRECTION,
              BPT.BIRTH_YEAR
              FROM BUSINESS_PLAN_TREATMENTS BPT, B
              WHERE B.SECTION_ID = BPT.SECTION_ID
              AND B.MAX_ID = BPT.ID_
              AND BPT.EXIT_NUMBER IS NOT NULL)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION
ORDER BY 1,4,2		
end LAST_YEAR;
		
begin PAVEMENT_TYPE
/* PAVEMENT_TYPE - last imported 07/26/2021 from pavconhist_prod.business_plan_treatments */
WITH A AS
  (SELECT SECTION_ID,
    MAX(ID_) MAX_ID
  FROM BUSINESS_PLAN_TREATMENTS
  GROUP BY SECTION_ID
  )
SELECT INV.FACILITY AS ROUTES,
  BPT.BMP AS BEGIN_STATION,
  BPT.EMP AS END_STATION,
  INV.DIRECTION,
  '06/30/2020' AS DATE_,
  BPT.PAVEMENT_TYPE AS DATA_
FROM RC_SECTION_MVIEW INV
INNER JOIN BUSINESS_PLAN_TREATMENTS BPT 
 ON INV.GLOBAL_ROUTE_ID = BPT.GLOBAL_ROUTE_ID
 AND INV.DIRECTION = BPT.DIRECTION
INNER JOIN A ON A.SECTION_ID = BPT.SECTION_ID
 AND A.MAX_ID = BPT.ID_
WHERE OUTER_LANE = 1
 AND BPT.PAVEMENT_TYPE <> '-99'
end PAVEMENT_TYPE;
 
begin SURFACE_TYPE
/* SURFACE_TYPE - connection RC dev - (this is derived from PAVEMENT_TYPE, so import that first) last imported 07/26/2021 */
SELECT ROUTES,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  DATE_,  
  CASE
    WHEN DATA_ IN ('F','FCJ','FCC','FLEXIBLE','COMPOSITE')
    THEN 'ASPHALT'
    WHEN DATA_ IN ('RJP','RJ','RC','RIGID')
    THEN 'PCC'
    ELSE 'UNKNOWN'
  END DATA_
FROM PAVEMENT_TYPE
WHERE EXTRACT(YEAR FROM DATE_) = 2020
end SURFACE_TYPE;

begin CI_MATERIAL_TYPE
/* CI_MATERIAL_TYPE - new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 07/26/2021 */
WITH A AS
  (SELECT *
  FROM BUSINESS_PLAN_TREATMENTS BPT,
    LU_TREATMENT TRT
  WHERE UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
  AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
  UNION
  SELECT *
  FROM BUSINESS_PLAN_TREATMENTS BPT,
    LU_TREATMENT TRT
  WHERE UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
  AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
  ),
  B AS
  (SELECT SECTION_ID,
    MAX(ID_) AS MAX_ID
  FROM A
  WHERE AGE_RESET = 1
  GROUP BY SECTION_ID
  )            
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  '06/30/2019' AS DATE_,
	  CASE
		WHEN REGEXP_LIKE (BPT.MATERIAL_DESCRIPTION,'(GAP|SMA|STONE MATRIX ASPHALT)','i')
		THEN 'GAP'
		ELSE 'HMA'
	  END DATA_
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL 
	  
	  UNION --ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  '06/30/2019' AS DATE_,
	  CASE
		WHEN REGEXP_LIKE (BPT.MATERIAL_DESCRIPTION,'(GAP|SMA|STONE MATRIX ASPHALT)','i')
		THEN 'GAP'
		ELSE 'HMA'
	  END DATA_
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL     
ORDER BY 1,4,2
end CI_MATERIAL_TYPE;

begin CI_FC_CATEGORY
/* CI_FC_CATEGORY - skip since we don't have 2017 inventory data (last imported 10/17/2017) */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
CASE
    WHEN FUNC_CL IN (1) THEN 'RI'
    WHEN FUNC_CL IN (7,8,9) THEN 'RC'
    WHEN FUNC_CL IN (2,3,6) THEN 'RA'
    WHEN FUNC_CL IN (11,12) THEN 'UF'
    WHEN FUNC_CL IN (17,18,19) THEN 'UC'
    WHEN FUNC_CL IN (14,16) THEN 'UA'
  END DATA_
FROM
  (SELECT FACILITY, 
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
  FUNC_CL
  FROM
    (SELECT
      RC.FACILITY,
      SEC.INV_BMP,
      SEC.INV_EMP,
      RC.DIRECTION ,
      SEC.FUNC_CL,
      CASE       
          WHEN RC.FACILITY <> LAG(RC.FACILITY) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN RC.DIRECTION <> LAG(RC.DIRECTION) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP) THEN 0  
          WHEN SEC.FUNC_CL <> (LAG(SEC.FUNC_CL) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) THEN 1
          WHEN SEC.INV_BMP - (LAG(SEC.INV_EMP) OVER (ORDER BY RC.FACILITY, RC.DIRECTION, SEC.INV_BMP)) > 0 THEN 1
          ELSE 0
        END GRP  
     FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.ROUTEID = SEC.ROUTEID
    AND RC.DIRECTION = SEC.DIRECTION
    WHERE SEC.HMIS_YEAR = 2016
    AND SEC.INV_BMP>=0
    AND INV_EMP>=0
    AND INV_EMP>=INV_BMP
    AND SEC.FUNC_CL>=0)    
    )
GROUP BY FACILITY, DIRECTION, PART, FUNC_CL
ORDER BY 1,4,2
end CI_FC_CATEGORY;

begin AVG_IRI
/* AVG_IRI - new query from business_plan_100mmi table 
   last imported 07/26/2021 from pavconhist_assetdev.business_plan_100mmi 
   would recommend delete and re-import IRI data since 2010  */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.DATA_*C.MILES)/SUM(C.MILES),3) AS DATA_
  FROM
    (--NON-RAMPS UNDIVIDED SEGMENTATION INVENTORY DIRECTION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1
    AND B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    UNION
    --RAMPS SEGMENTATION INVENTORY DIRECTION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE G.IS_INVENTORY_DIRECTION = 1
    AND B.ROUTE = 'RP'
    AND B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      ROUND(CASE
      WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
        (L_IRI_ADJ_SP_CH+R_IRI_ADJ_SP_CH)/2
      WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
        R_IRI_ADJ_SP_CH
      WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
        L_IRI_ADJ_SP_CH
      WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
        NULL
      END, 8) AS DATA_
    FROM BUSINESS_PLAN_100MMI B 
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION   >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  AND C.DATA_ >=0  
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	 --NON-RAMPS DIVIDED SEGMENTATION BOTH DIRECTION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP AS BEGIN_STATION,
	  INV_EMP AS END_STATION,
	  B.DIRECTION,
	ROUND(CASE
	WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
	  (L_IRI_ADJ_SP_CH+R_IRI_ADJ_SP_CH)/2
	WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
	  R_IRI_ADJ_SP_CH
	WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
	  L_IRI_ADJ_SP_CH
	WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
	  NULL
	END, 8) AS DATA_
	FROM BUSINESS_PLAN_100MMI B
	WHERE B.MEDIAN_TYPE NOT IN (4,5)
	AND B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
	AND B.ROUTE <> 'RP'
	AND (CASE
		  WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
			(L_IRI_ADJ_SP_CH+R_IRI_ADJ_SP_CH)/2
		  WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH > 0 AND R_IRI_ADJ_SP_CH IS NOT NULL) THEN
			R_IRI_ADJ_SP_CH
		  WHEN (L_IRI_ADJ_SP_CH > 0 AND L_IRI_ADJ_SP_CH IS NOT NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
			L_IRI_ADJ_SP_CH
		  WHEN (L_IRI_ADJ_SP_CH = 0 OR L_IRI_ADJ_SP_CH IS NULL) AND (R_IRI_ADJ_SP_CH = 0 OR R_IRI_ADJ_SP_CH IS NULL) THEN
			NULL
		  END
		) IS NOT NULL)	  
	WHERE DATA_ IS NOT NULL
	ORDER BY REPORTING_YEAR, ROUTES, DIRECTION, BEGIN_STATION  
end AVG_IRI;

begin AVG_RUT
/* AVG_RUT - new query from business_plan_100mmi table  
   last imported 07/26/2021 from pavconhist_assetdev.business_plan_100mmi 
   would recommend delete and re-import rutting data since 2010 
   Use this query for AVG_RUT_SDV as well */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
ROUND(DATA_,4) AS DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.DATA_*C.MILES)/SUM(C.MILES),4) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
      ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP       AS BEGIN_STATION,
      INV_EMP       AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018, 2019, 2020)
	AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE  <> 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B 
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018, 2019, 2020)
    AND B.ROUTE = 'RP'
	AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      CASE WHEN L_RUT IS NULL THEN R_RUT
        WHEN R_RUT IS NULL THEN L_RUT
      ELSE (L_RUT+R_RUT)/2 END DATA_
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018, 2019, 2020)
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION   >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  AND C.DATA_ >= 0
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  CASE WHEN L_RUT IS NULL THEN R_RUT
		WHEN R_RUT IS NULL THEN L_RUT
	  ELSE (L_RUT+R_RUT)/2 END DATA_
	FROM BUSINESS_PLAN_100MMI B
	WHERE B.REPORTING_YEAR  in (2010,2011,2012,2013,2014,2015,2016,2017,2018, 2019, 2020)
	AND B.MEDIAN_TYPE NOT IN (4,5)
	AND B.ROUTE <> 'RP'
	AND (L_RUT IS NOT NULL OR R_RUT IS NOT NULL))
	ORDER BY REPORTING_YEAR, ROUTES, DIRECTION, BEGIN_STATION
end AVG_RUT;	

begin SPADJ_SKID_NUMBER
/* SPADJ_SKID_NUMBER - delete and re-import data since 2010. 
   Friction data is only collected every other year. The inventory direction is used in the PMS since that is used for reporting.
   last imported 07/26/2021 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.SP_ADJ_SKID_NO*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    ( -- Undivided Roads 
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP       AS BEGIN_STATION,
      INV_EMP       AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN (SELECT * FROM GLOBAL_ROUTE_PAV WHERE SUB_ROUTE_ID = 1) G  
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5) -- Undivided 
    AND B.ROUTE <> 'RP'   
    UNION   
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN (SELECT * FROM GLOBAL_ROUTE_PAV WHERE SUB_ROUTE_ID = 1) G 
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)   
    AND B.ROUTE = 'RP'
    AND INV_EMP-INV_BMP>0
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      SP_ADJ_SKID_NO
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.SP_ADJ_SKID_NO >= 0
    AND INV_EMP-INV_BMP>0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION  -- Divided Roads (import as is)
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  SP_ADJ_SKID_NO AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5) -- Divided
		AND B.ROUTE <> 'RP'
		AND B.SP_ADJ_SKID_NO >= 0
    AND INV_EMP-INV_BMP>0)
end SPADJ_SKID_NUMBER;

begin SPADJ_SKID_CATEGORY
/* SPADJ_SKID_CATEGORY (derived from SPADJ_SKID_NUMBER, so import that first) - last imported 07/26/2021 */
SELECT  ROUTES ,BEGIN_STATION ,END_STATION ,DIRECTION, DATE_, '1' AS DATA_
FROM SPADJ_SKID_NUMBER
WHERE EXTRACT(YEAR FROM DATE_)>=2010 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) <30
UNION
SELECT  ROUTES ,BEGIN_STATION ,END_STATION ,DIRECTION, DATE_, '2' AS DATA_
FROM SPADJ_SKID_NUMBER
WHERE EXTRACT(YEAR FROM DATE_)>=2010 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) <35
AND (DATA_) >=30
UNION
SELECT  ROUTES ,BEGIN_STATION ,END_STATION ,DIRECTION, DATE_, '3' AS DATA_
FROM SPADJ_SKID_NUMBER
WHERE EXTRACT(YEAR FROM DATE_)>=2010 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) <40
AND (DATA_) >=35
UNION
SELECT  ROUTES ,BEGIN_STATION ,END_STATION ,DIRECTION, DATE_, '4' AS DATA_
FROM SPADJ_SKID_NUMBER
WHERE EXTRACT(YEAR FROM DATE_)>=2010 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) <45
AND (DATA_) >=40
UNION
SELECT  ROUTES ,BEGIN_STATION ,END_STATION ,DIRECTION, DATE_, '5' AS DATA_
FROM SPADJ_SKID_NUMBER
WHERE EXTRACT(YEAR FROM DATE_)>=2010 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >=45
end SPADJ_SKID_CATEGORY;

begin CONDITION_IRI
/* CONDITION_IRI - derived from AVG_IRI, so import that first (last imported 07/27/2021.
  Only removed 2019 and imported 2019 and 2020. It might be better to remove and import the last 10 years */

SELECT  ROUTES, BEGIN_STATION, END_STATION, DIRECTION, DATE_,
'VERY GOOD' AS DATA_
FROM AVG_IRI
WHERE EXTRACT(YEAR FROM DATE_) >= 2019 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >=0
AND (DATA_) <60
UNION
SELECT  ROUTES, BEGIN_STATION, END_STATION, DIRECTION, DATE_,
'GOOD' AS DATA_
FROM AVG_IRI
WHERE EXTRACT(YEAR FROM DATE_) >= 2019 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >=60
AND (DATA_) <95
UNION
SELECT  ROUTES, BEGIN_STATION, END_STATION, DIRECTION, DATE_,
'FAIR' AS DATA_
FROM AVG_IRI
WHERE EXTRACT(YEAR FROM DATE_) >= 2019 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >=95
AND (DATA_) <=170
UNION
SELECT  ROUTES, BEGIN_STATION, END_STATION, DIRECTION, DATE_,
'MEDIOCRE' AS DATA_
FROM AVG_IRI
WHERE EXTRACT(YEAR FROM DATE_) >= 2019 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >170
AND (DATA_) <=220
UNION
SELECT  ROUTES, BEGIN_STATION, END_STATION, DIRECTION, DATE_,
'POOR' AS DATA_
FROM AVG_IRI
WHERE EXTRACT(YEAR FROM DATE_) >= 2019 AND EXTRACT(YEAR FROM DATE_)<= 2020
AND (DATA_) >220
end CONDITION_IRI;

begin TOTAL_LANES
/* TOTAL_LANES - skip since we don't have 2017 inventory data - last imported 10-17-2017
   import from pavconhist_assetdev
   FOR UNDIVIDED LANES, DIRECTION JOIN IS NOT PRESENT FACILITATING THE SUM OF OPPOSITE BOUNDS.  
   The fact that the inv_bmp and emp are same for both bounds also helps this approach.
   MEDIAN_TYPE 4 is Undivided - None, MEDIAN_TYPE 5 is Undivided - Center Turn La */
SELECT FACILITY AS ROUTES,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
TOTAL_LANES AS DATA_
FROM
(
  SELECT FACILITY, 
    INV_BMP,
    INV_EMP,
    DIRECTION,
    SUM (GRP) OVER (PARTITION BY FACILITY ORDER BY FACILITY, DIRECTION, INV_BMP) + 1 PART,
    TOTAL_LANES
    FROM
    (   
    SELECT
      FACILITY,
      INV_BMP,
      INV_EMP,
      DIRECTION ,
      TOTAL_LANES,
      CASE       
        WHEN FACILITY <> LAG(FACILITY) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP) THEN 0  
        WHEN DIRECTION <> LAG(DIRECTION) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP) THEN 0  
        WHEN TOTAL_LANES <> (LAG(TOTAL_LANES) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP)) THEN 1
        WHEN INV_BMP - (LAG(INV_EMP) OVER (ORDER BY FACILITY, DIRECTION, INV_BMP)) > 0 THEN 1
        ELSE 0
      END GRP      
    FROM 
    (
    SELECT RC.GLOBAL_ROUTE_ID,
      RC.FACILITY,
      INV_BMP,
      INV_EMP,
      RC.DIRECTION,
      SUM(TOTAL_LANES_THRU+TOTAL_LANES_AUX) AS TOTAL_LANES
    FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID 
    AND SEC.HMIS_YEAR = 2016
    AND MEDIAN_TYPE IN (4,5) 
    GROUP BY RC.GLOBAL_ROUTE_ID,
      RC.FACILITY,
      INV_BMP,
      INV_EMP,
      RC.DIRECTION
    UNION
    SELECT DISTINCT RC.GLOBAL_ROUTE_ID,
      RC.FACILITY,
      INV_BMP,
      INV_EMP,
      RC.DIRECTION ,
      TOTAL_LANES_THRU+ TOTAL_LANES_AUX AS TOTAL_LANES
    FROM SECTION_TABLE SEC
    INNER JOIN RC_SECTION_MVIEW RC
    ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
    AND RC.DIRECTION      = SEC.DIRECTION
	and 
    AND MEDIAN_TYPE NOT IN (4,5)
    AND SEC.HMIS_YEAR    = 2016)
    ) 
)
GROUP BY FACILITY, DIRECTION, PART, TOTAL_LANES
ORDER BY 1,4,2
END TOTAL_LANES

begin CURB
/* CURB - skip since we don't have 2017 inventory data - (last imported 10/17/2017) */
SELECT 
  RC.FACILITY AS ROUTES,
  INV_BMP AS BEGIN_STATION,
  INV_EMP AS END_STATION,
  RC.DIRECTION,
  '06/30/2017' AS DATE_,
CASE WHEN IN_SHLD_TYPE in (4,6,7,8,9,10) OR OUT_SHLD_TYPE in (4,6,7,8,9,10) THEN 'CLOSED' 
 ELSE 'OPEN' END DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
AND RC.DIRECTION = SEC.DIRECTION
WHERE SEC.HMIS_YEAR = 2016
end CURB;

begin SIMDIV
/* SIMDIV (last imported 02/13/2018) - skip since we don't have 2017 inventory data 
	USE_AS_PRIMARY = 1 corresponds to inventory direction
	MEDIAN_TYPE 4 is Undivided - None, MEDIAN_TYPE 5 is Undivided - Center Turn La
	For more info, SELECT * from PAVCORE.LU_MEDIAN_TYPE */
SELECT 
 RC.FACILITY AS ROUTES,
 INV_BMP AS BEGIN_STATION,
 INV_EMP AS END_STATION,
 RC.DIRECTION ,
 '06/30/2017' AS DATE_,
CASE WHEN USE_AS_PRIMARY = 1 THEN 1 ELSE 0 END DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
 AND RC.DIRECTION = SEC.DIRECTION
  AND SEC.HMIS_YEAR = 2016
   AND MEDIAN_TYPE IN (4,5)    
UNION --divided roads
SELECT 
 RC.FACILITY AS ROUTES,
 INV_BMP AS BEGIN_STATION,
 INV_EMP AS END_STATION,
 RC.DIRECTION ,
 '06/30/2017' AS DATE_,
 1 AS DATA_
FROM SECTION_TABLE SEC
INNER JOIN RC_SECTION_MVIEW RC
ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
 AND RC.DIRECTION = SEC.DIRECTION
 WHERE SEC.HMIS_YEAR = 2016
 AND MEDIAN_TYPE NOT IN (4,5)
end SIMDIV; 

begin BRIDGE_LONG - to do (see bridge)
/* BRIDGE_LONG - imported and updated 01/19/2018 - skip (no need to reimport)*/
SELECT RC.FACILITY AS ROUTES, 
BRIDGE_QRY.BEGIN_STATION,
BRIDGE_QRY.END_STATION,
RC.DIRECTION,
'06/30/2017' AS DATE_,
BRIDGE_QRY.BRIDGE_LENGTH AS DATA_
FROM
(SELECT ROUTEID,GLOBAL_ROUTE_ID, SUB_ROUTE_ID,
MIN(INV_BMP) AS BEGIN_STATION,
MAX(INV_EMP) AS END_STATION,
DIRECTION,
SUM(SECTION_LENGTH) AS BRIDGE_LENGTH
FROM
(
SELECT ROUTEID, 
  GLOBAL_ROUTE_ID, SUB_ROUTE_ID,
  INV_BMP,
  INV_EMP,
  DIRECTION,
  SUM (BRIDGE_GRP) OVER (PARTITION BY ROUTEID ORDER BY ROUTEID, INV_BMP) + 1 PART,
  SECTION_LENGTH
  FROM
    (
    SELECT ROUTEID, GLOBAL_ROUTE_ID, SUB_ROUTE_ID, INV_BMP, INV_EMP, SECTION_LENGTH, DIRECTION,
    CASE       
    WHEN ROUTEID <> LAG(ROUTEID) OVER (ORDER BY ROUTEID, INV_BMP) THEN 1 
    WHEN DIR_BMP = LAG(DIR_EMP) OVER (ORDER BY ROUTEID, INV_BMP) THEN 0
    ELSE 1
    END BRIDGE_GRP
    FROM SECTION_TABLE 
    WHERE HMIS_YEAR = 2016 
    AND (GOVT_CONTROL IN (1,31) OR (MAIN_LINE = 1 AND NHS_CODE>0))
    AND FACILITY_TYPE IN (3,4)
    ORDER BY ROUTEID, INV_BMP
    )
)
GROUP BY ROUTEID, GLOBAL_ROUTE_ID, SUB_ROUTE_ID,DIRECTION, PART
) BRIDGE_QRY
INNER JOIN RC_SECTION_MVIEW RC ON
RC.GLOBAL_ROUTE_ID = BRIDGE_QRY.GLOBAL_ROUTE_ID
AND RC.SUB_ROUTE_ID = BRIDGE_QRY.SUB_ROUTE_ID
WHERE BRIDGE_QRY.BRIDGE_LENGTH>=0.1
ORDER BY 1,4,2
END BRIDGE_LONG;

begin CRACK_SEAL_EXISTS - 
/* not needed - instead in feasibility use LAST_MAINT_TREATMENT ='CRACK SEAL' and LAST_MAINT_YEAR>=LAST_REHAB_YEAR 
CRACK_SEAL_EXISTS (from pavconhist_assetdev.cracking last imported 05/24/16)
	Import query for  attribute CRACK_SEAL_EXISTS
	The locations should result in an attribute called "CRACK_SEAL_EXISTS" where that value equals 1 at these locations.  
	A feasibility requirement of crack sealing should be that CRACK_SEAL_EXISTS is not anywhere within the  segment.  
	A consequence of crack sealing as a treatment should include changing the CRACK_SEAL_EXISTS attribute to 1, 
	so that it doesn't happen more than once in the life of the pavement. */
SELECT COUNTY
  ||'-'
  ||ROUTE
  ||' '
  ||RNUM
  ||TRIM(RSUFF) AS ROUTES,
  INVENTORY_BMP AS BEGIN_STATION,
  INVENTORY_EMP AS END_STATION,
  DIRECTION,
  '06/30/2017' AS DATE_,
  1 AS DATA_
 FROM CRACKING WHERE
((TRANSVERSE_SEALED IS NOT NULL 
OR LONGITUDINAL_LE_SEALED IS NOT NULL
OR LONGITUDINAL_LWP_SEALED IS NOT NULL
OR LONGITUDINAL_CTR_SEALED IS NOT NULL
OR LONGITUDINAL_RWP_SEALED IS NOT NULL
OR LONGITUDINAL_RE_SEALED IS NOT NULL)
AND (YEAR = 2016
AND EVENT_CODE = 1
AND TRIM(EXIT_NO) IS NULL))

UNION --ramps

SELECT COUNTY
  ||'-'
  ||ROUTE
  ||' '
  ||RNUM
  ||TRIM(RSUFF)
  ||' RP'
  ||RAMP_NO
  ||'-'
  ||EXIT_NO AS ROUTES,
    INVENTORY_BMP AS BEGIN_STATION,
  INVENTORY_EMP AS END_STATION,
  DIRECTION,
  '06/30/2017' AS DATE_,
  1 AS DATA_
 FROM CRACKING WHERE
((TRANSVERSE_SEALED IS NOT NULL 
OR LONGITUDINAL_LE_SEALED IS NOT NULL
OR LONGITUDINAL_LWP_SEALED IS NOT NULL
OR LONGITUDINAL_CTR_SEALED IS NOT NULL
OR LONGITUDINAL_RWP_SEALED IS NOT NULL
OR LONGITUDINAL_RE_SEALED IS NOT NULL)
AND (YEAR = 2016
AND EVENT_CODE = 1
AND TRIM(EXIT_NO) IS NOT NULL))
ORDER BY ROUTES, DIRECTION, BEGIN_STATION
end CRACK_SEAL_EXISTS;

begin ONE_MILE_OR_MORE
/* ONE_MILE_OR_MORE - skip since we do not have 2017 inventory data (last imported 10/17/2017) */
SELECT DISTINCT RC.FACILITY AS ROUTES,
  RC.BEGIN_STATION,
  RC.END_STATION,
  RC.DIRECTION,
'06/30/2017' AS DATE_,
  1 AS DATA_ FROM RC_SECTION_MVIEW RC 
  INNER JOIN SECTION_TABLE SEC
  ON RC.GLOBAL_ROUTE_ID = SEC.GLOBAL_ROUTE_ID
  WHERE SEC.ONE_MILE_OR_MORE = 1 
  AND SEC.HMIS_YEAR = 2016
end ONE_MILE_OR_MORE;

begin GLOBAL_ROUTE_ID
/* GLOBAL_ROUTE_ID - skip since we do not have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
GLOBAL_ROUTE_ID AS DATA_
FROM RC_SECTION_MVIEW
WHERE GLOBAL_ROUTE_ID IS NOT NULL
end GLOBAL_ROUTE_ID;

begin SUB_ROUTE_ID
/* SUB_ROUTE_ID - skip since we do not have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
SUB_ROUTE_ID AS DATA_
FROM RC_SECTION_MVIEW
WHERE GLOBAL_ROUTE_ID IS NOT NULL
AND SUB_ROUTE_ID IS NOT NULL
end SUB_ROUTE_ID;

begin ROUTEID
/* ROUTEID - skip since we do not have 2017 inventory data (last imported 02/13/2018) */
SELECT FACILITY AS ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
ROUTEID AS DATA_
FROM RC_SECTION_MVIEW
WHERE ROUTEID IS NOT NULL
end ROUTEID

begin HMIS_ROUTEID
/* HMIS_ROUTEID - skip since we do not have 2017 inventory data - last imported 01-03-2018 - ok*/
SELECT  COUNTY||'-'||SEC.ASSOCIATED_ID_PREFIX||' '||SEC.RNUM||TRIM(SEC.RSUFF)||
(CASE WHEN EXIT_NUMBER IS NOT NULL THEN ' '||SEC.ROUTE||SEC.RAMP_NUMBER||'-'||SEC.EXIT_NUMBER ELSE NULL END) AS ROUTES,
MIN(INV_BMP) BEGIN_STATION,
MAX(INV_EMP) END_STATION,
DIRECTION,
'06/30/2017' AS DATE_,
HMIS_ROUTEID AS DATA_
FROM SECTION_TABLE@PAV_CONHIST_ASSETDEV SEC
WHERE  HMIS_YEAR = 2016
AND (NHS_CODE <> 0
OR GOVT_CONTROL IN (1,31))
GROUP BY HMIS_ROUTEID,
COUNTY||'-'||SEC.ASSOCIATED_ID_PREFIX||' '||SEC.RNUM||TRIM(SEC.RSUFF)||
(CASE WHEN EXIT_NUMBER IS NOT NULL THEN ' '||SEC.ROUTE||SEC.RAMP_NUMBER||'-'||SEC.EXIT_NUMBER ELSE NULL END),
DIRECTION
ORDER BY 1,4,2
END HMIS_ROUTEID

begin AVG_REHAB_CYCLE - is this required?
/* AVG_REHAB_CYCLE - skip - (last imported 05/24/16 from pavconhist_prod.rehab_cycle_view) */
SELECT COUNTY
  ||'-'
  ||ROUTE
  ||' '
  ||RNUM
  ||TRIM(RSUFF) AS ROUTES,
  BMP AS BEGIN_STATION,
  EMP AS END_STATION,  
  DIRECTION, 
  '06/30/2017' AS DATE_,
  ROUND(AVG_CYCLE_YEAR,2) AS DATA_
  FROM
  ( 
    SELECT COUNTY, ROUTE, RNUM, RSUFF, DIRECTION, LANE_NUMBER, BMP, EMP, 
    AVG(DEATH_YEAR-BIRTH_YEAR) AS AVG_CYCLE_YEAR 
    FROM REHAB_CYCLE_VIEW  
    WHERE BIRTH_YEAR >= 1994 AND (DEATH_YEAR-BIRTH_YEAR) > 0 
    GROUP BY COUNTY, ROUTE, RNUM, RSUFF, DIRECTION, LANE_NUMBER, BMP, EMP
   )
WHERE AVG_CYCLE_YEAR < 6  
ORDER BY COUNTY, ROUTE, RNUM, RSUFF, DIRECTION, LANE_NUMBER, BMP, EMP
end AVG_REHAB_CYCLE;

begin BEGIN_LIMIT
/* BEGIN_LIMIT - skip since we do not have 2017 inventory data - (last imported 10/25/2017)*/
SELECT  
COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX) AS ROUTES
,HMIS.ID_MP AS BEGIN_STATION
,HMIS.ID_MP+0.001 AS END_STATION
,HMIS.MP_DIRECTION AS DIRECTION  -- INVENTORY DIRECTION
, '06/30/2017' AS DATE_
,REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(INITCAP(HMIS.MP_INT_RTE_NAME)
,'At Mp','at MP')
,'Th','th')
,'1St','1st')
,'Bu ','BU ')
,' To ',' to ')
,'Nb','NB')
,'Sb','SB')
,' Eb ',' EB ')
,'Eb/','EB/')
,'Eb)','EB)')
,' Wb ',' WB ')
,'Wb/','WB/')
,'Wb)','WB)')
,'Is ','IS ')
,'Md ','MD ')
,' Md',' MD')
,'Us ','US ')
,'Fr ','FR ')
,'Rp ','RP ')
,'To Is','To IS')
,'FR Is','FR IS')
,'FR Us','FR US')
,'3Rd','3rd')
,'Dc ','DC ')
,'Sw ','SW ')
,'Se ','SE ')
,'(Is','(IS')
,'(Sp1','SP1')
,'(Sp2','SP2')
,'(Sp3','SP3')
,'(Sp4','SP4')
,'(Sp5','SP5')
,'(Sp6','SP6')
,'(Sp7','SP7')
,'(Sp8','SP8')
,'(Sp9','SP9')
,'(Eb ','EB ')
,'(Wb ','WB ')
,'(1al ','1AL ')
,'(4al ','4AL ')
,'(8al ','8AL ')
,'wb)','WB)')
,'eb)','EB)')
,'nb)','NB)')
,'sb)','SB)')
,'b)','B)')
,'bu ','BU ')
,'Sp ','SP ')
,'Eb ','EB ')
,'Wb ','WB ')
,' Eb ',' EB ')
,' Wb ',' WB ')
,'- Sp','- SP')
,'the Alameda','The Alameda')
,'thayer','Thayer')
,'third','Third')
,'thames','Thames')
,'thornton','Thornton')
,'thelma','Thelma')
,'three','Three')
,'thanksgiving','Thanksgiving')
,'thurston','Thurston')
,'thornapple','Thornapple')
,'thomas','Thomas')
,'thistle','Thistle')
,'thompson','Thompson')
,'thorogood','Thorogood')
,'thomas','Thomas') ||
CASE WHEN HMIS.MP_LOCATION_TYPE = 1 THEN ' ' || HMIS.MP_INT_RTEPRE || ' ' || HMIS.MP_INT_RTENO
ELSE NULL END 
|| ' at MP '|| 
CASE WHEN HMIS.ID_MP > 0 AND HMIS.ID_MP < 1 THEN TRIM(TO_CHAR(HMIS.ID_MP,'0.00')) ELSE TRIM(TO_CHAR(HMIS.ID_MP)) END DATA_
FROM HMIS_MASTER_ALL_YEARS HMIS,
COUNTY, RC_SECTION_MVIEW
WHERE COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX)
= RC_SECTION_MVIEW.FACILITY
AND HMIS.MP_DIRECTION = RC_SECTION_MVIEW.DIRECTION
AND HMIS."YEAR" = 2016
AND HMIS.COUNTY = COUNTY.CODE
AND HMIS.MP_LOCATION_TYPE NOT IN (0,7,8,12,13,14,17,18,19,20,22,32,99)
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%NO NAME%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%START OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%END OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME <> 'BEGIN BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'END BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'DIRECTIONAL CROSSOVER'
AND HMIS.MAIN_LINE = 1

UNION ALL  -- non-inventory direction

SELECT  
COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX) AS ROUTES
,HMIS.ID_MP AS BEGIN_STATION
,HMIS.ID_MP+0.001 AS END_STATION
,CASE WHEN HMIS.MP_DIRECTION  = 'E' THEN 'W' 
      WHEN HMIS.MP_DIRECTION  = 'W' THEN 'E'
      WHEN HMIS.MP_DIRECTION  = 'N' THEN 'S'
      WHEN HMIS.MP_DIRECTION  = 'S' THEN 'N'      
END DIRECTION      
, '06/30/2017' AS DATE_
,REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(INITCAP(hmis.mp_int_rte_name)
,'At Mp','at MP')
,'Th','th')
,'1St','1st')
,'Bu ','BU ')
,' To ',' to ')
,'Nb','NB')
,'Sb','SB')
,' Eb ',' EB ')
,'Eb/','EB/')
,'Eb)','EB)')
,' Wb ',' WB ')
,'Wb/','WB/')
,'Wb)','WB)')
,'Is ','IS ')
,'Md ','MD ')
,' Md',' MD')
,'Us ','US ')
,'Fr ','FR ')
,'Rp ','RP ')
,'To Is','To IS')
,'FR Is','FR IS')
,'FR Us','FR US')
,'3Rd','3rd')
,'Dc ','DC ')
,'Sw ','SW ')
,'Se ','SE ')
,'(Is','(IS')
,'(Sp1','SP1')
,'(Sp2','SP2')
,'(Sp3','SP3')
,'(Sp4','SP4')
,'(Sp5','SP5')
,'(Sp6','SP6')
,'(Sp7','SP7')
,'(Sp8','SP8')
,'(Sp9','SP9')
,'(Eb ','EB ')
,'(Wb ','WB ')
,'(1al ','1AL ')
,'(4al ','4AL ')
,'(8al ','8AL ')
,'wb)','WB)')
,'eb)','EB)')
,'nb)','NB)')
,'sb)','SB)')
,'b)','B)')
,'bu ','BU ')
,'Sp ','SP ')
,'Eb ','EB ')
,'Wb ','WB ')
,' Eb ',' EB ')
,' Wb ',' WB ')
,'- Sp','- SP')
,'the Alameda','The Alameda')
,'thayer','Thayer')
,'third','Third')
,'thames','Thames')
,'thornton','Thornton')
,'thelma','Thelma')
,'three','Three')
,'thanksgiving','Thanksgiving')
,'thurston','Thurston')
,'thornapple','Thornapple')
,'thomas','Thomas')
,'thistle','Thistle')
,'thompson','Thompson')
,'thorogood','Thorogood')
,'thomas','Thomas') ||
CASE WHEN HMIS.MP_LOCATION_TYPE = 1 THEN ' ' || HMIS.MP_INT_RTEPRE || ' ' || HMIS.MP_INT_RTENO
ELSE NULL END 
|| ' at MP '|| 
CASE WHEN HMIS.ID_MP > 0 AND HMIS.ID_MP < 1 THEN TRIM(TO_CHAR(HMIS.ID_MP,'0.00')) ELSE TRIM(TO_CHAR(HMIS.ID_MP)) END DATA_
FROM HMIS_MASTER_ALL_YEARS HMIS,
COUNTY, RC_SECTION_MVIEW
WHERE COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX)
= RC_SECTION_MVIEW.FACILITY
AND HMIS.MP_DIRECTION = RC_SECTION_MVIEW.DIRECTION
AND HMIS."YEAR" = 2016
AND HMIS.COUNTY = COUNTY.CODE
AND HMIS.MP_LOCATION_TYPE NOT IN (0,7,8,12,13,14,17,18,19,20,22,32,99)
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%NO NAME%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%START OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%END OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME <> 'BEGIN BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'END BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'DIRECTIONAL CROSSOVER'
AND HMIS.MAIN_LINE = 1
end BEGIN_LIMIT;

begin END_LIMIT
/* END_LIMIT - skip since we do not have 2017 inventory data (last imported 10/25/2017)*/
SELECT  
COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX) AS ROUTES
,CASE WHEN HMIS.ID_MP-0.001<0 THEN 0 ELSE HMIS.ID_MP-0.001 END BEGIN_STATION  
,CASE WHEN HMIS.ID_MP=0 THEN 0.001 ELSE HMIS.ID_MP END END_STATION  
,HMIS.MP_DIRECTION AS DIRECTION  -- inventory direction
, '06/30/2017' AS DATE_
,REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(INITCAP(hmis.mp_int_rte_name)
,'At Mp','at MP')
,'Th','th')
,'1St','1st')
,'Bu ','BU ')
,' To ',' to ')
,'Nb','NB')
,'Sb','SB')
,' Eb ',' EB ')
,'Eb/','EB/')
,'Eb)','EB)')
,' Wb ',' WB ')
,'Wb/','WB/')
,'Wb)','WB)')
,'Is ','IS ')
,'Md ','MD ')
,' Md',' MD')
,'Us ','US ')
,'Fr ','FR ')
,'Rp ','RP ')
,'To Is','To IS')
,'FR Is','FR IS')
,'FR Us','FR US')
,'3Rd','3rd')
,'Dc ','DC ')
,'Sw ','SW ')
,'Se ','SE ')
,'(Is','(IS')
,'(Sp1','SP1')
,'(Sp2','SP2')
,'(Sp3','SP3')
,'(Sp4','SP4')
,'(Sp5','SP5')
,'(Sp6','SP6')
,'(Sp7','SP7')
,'(Sp8','SP8')
,'(Sp9','SP9')
,'(Eb ','EB ')
,'(Wb ','WB ')
,'(1al ','1AL ')
,'(4al ','4AL ')
,'(8al ','8AL ')
,'wb)','WB)')
,'eb)','EB)')
,'nb)','NB)')
,'sb)','SB)')
,'b)','B)')
,'bu ','BU ')
,'Sp ','SP ')
,'Eb ','EB ')
,'Wb ','WB ')
,' Eb ',' EB ')
,' Wb ',' WB ')
,'- Sp','- SP')
,'the Alameda','The Alameda')
,'thayer','Thayer')
,'third','Third')
,'thames','Thames')
,'thornton','Thornton')
,'thelma','Thelma')
,'three','Three')
,'thanksgiving','Thanksgiving')
,'thurston','Thurston')
,'thornapple','Thornapple')
,'thomas','Thomas')
,'thistle','Thistle')
,'thompson','Thompson')
,'thorogood','Thorogood')
,'thomas','Thomas')
,'thunder','Thunder') || 

CASE WHEN HMIS.MP_LOCATION_TYPE = 1 THEN ' ' || HMIS.MP_INT_RTEPRE || ' ' || HMIS.MP_INT_RTENO
ELSE NULL END 
|| ' at MP '|| 
CASE WHEN HMIS.ID_MP > 0 AND HMIS.ID_MP < 1 THEN TRIM(TO_CHAR(HMIS.ID_MP,'0.00')) ELSE TRIM(TO_CHAR(HMIS.ID_MP)) END DATA_
FROM HMIS_MASTER_ALL_YEARS HMIS,
COUNTY, RC_SECTION_MVIEW
WHERE COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX)
= RC_SECTION_MVIEW.FACILITY
AND HMIS.MP_DIRECTION = RC_SECTION_MVIEW.DIRECTION
AND HMIS."YEAR" = 2016
AND HMIS.COUNTY = COUNTY.CODE
AND HMIS.MP_LOCATION_TYPE NOT IN (0,7,8,12,13,14,17,18,19,20,22,32,99)
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%NO NAME%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%START OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%END OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME <> 'BEGIN BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'END BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'DIRECTIONAL CROSSOVER'
AND HMIS.MP_INT_RTE_NAME <> 'NIKE DR'
AND HMIS.MAIN_LINE = 1

UNION ALL  -- non-inventory direction

SELECT  
COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX) AS ROUTES
,CASE WHEN HMIS.ID_MP-0.001<0 THEN 0 ELSE HMIS.ID_MP-0.001 END BEGIN_STATION  
,CASE WHEN HMIS.ID_MP=0 THEN 0.001 ELSE HMIS.ID_MP END END_STATION   
,CASE WHEN HMIS.MP_DIRECTION  = 'E' THEN 'W'
      WHEN HMIS.MP_DIRECTION  = 'W' THEN 'E'
      WHEN HMIS.MP_DIRECTION  = 'N' THEN 'S'
      WHEN HMIS.MP_DIRECTION  = 'S' THEN 'N'      
END DIRECTION    
, '06/30/2017' AS DATE_
,REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
(INITCAP(HMIS.MP_INT_RTE_NAME)
,'At Mp','at MP')
,'Th','th')
,'1St','1st')
,'Bu ','BU ')
,' To ',' to ')
,'Nb','NB')
,'Sb','SB')
,' Eb ',' EB ')
,'Eb/','EB/')
,'Eb)','EB)')
,' Wb ',' WB ')
,'Wb/','WB/')
,'Wb)','WB)')
,'Is ','IS ')
,'Md ','MD ')
,' Md',' MD')
,'Us ','US ')
,'Fr ','FR ')
,'Rp ','RP ')
,'To Is','To IS')
,'FR Is','FR IS')
,'FR Us','FR US')
,'3Rd','3rd')
,'Dc ','DC ')
,'Sw ','SW ')
,'Se ','SE ')
,'(Is','(IS')
,'(Sp1','SP1')
,'(Sp2','SP2')
,'(Sp3','SP3')
,'(Sp4','SP4')
,'(Sp5','SP5')
,'(Sp6','SP6')
,'(Sp7','SP7')
,'(Sp8','SP8')
,'(Sp9','SP9')
,'(Eb ','EB ')
,'(Wb ','WB ')
,'(1al ','1AL ')
,'(4al ','4AL ')
,'(8al ','8AL ')
,'wb)','WB)')
,'eb)','EB)')
,'nb)','NB)')
,'sb)','SB)')
,'b)','B)')
,'bu ','BU ')
,'Sp ','SP ')
,'Eb ','EB ')
,'Wb ','WB ')
,' Eb ',' EB ')
,' Wb ',' WB ')
,'- Sp','- SP')
,'the Alameda','The Alameda')
,'thayer','Thayer')
,'third','Third')
,'thames','Thames')
,'thornton','Thornton')
,'thelma','Thelma')
,'three','Three')
,'thanksgiving','Thanksgiving')
,'thurston','Thurston')
,'thornapple','Thornapple')
,'thomas','Thomas')
,'thistle','Thistle')
,'thompson','Thompson')
,'thorogood','Thorogood')
,'thomas','Thomas')
,'thunder','Thunder')
|| 
CASE WHEN HMIS.MP_LOCATION_TYPE = 1 THEN ' ' || HMIS.MP_INT_RTEPRE || ' ' || HMIS.MP_INT_RTENO
ELSE NULL END 
|| ' at MP '|| 
CASE WHEN HMIS.ID_MP > 0 AND HMIS.ID_MP < 1 THEN TRIM(TO_CHAR(HMIS.ID_MP,'0.00')) ELSE TRIM(TO_CHAR(HMIS.ID_MP)) END DATA_
FROM HMIS_MASTER_ALL_YEARS HMIS,
COUNTY, RC_SECTION_MVIEW
WHERE COUNTY.COUNTY_CODE || '-' || TRIM(HMIS.ID_PREFIX) || ' ' || TRIM(HMIS.ID_RTE_NO) || TRIM(HMIS.MP_SUFFIX)
= RC_SECTION_MVIEW.FACILITY
AND HMIS.MP_DIRECTION = RC_SECTION_MVIEW.DIRECTION
AND HMIS."YEAR" = 2016
AND HMIS.COUNTY = COUNTY.CODE
AND HMIS.MP_LOCATION_TYPE NOT IN (0,7,8,12,13,14,17,18,19,20,22,32,99)
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%NO NAME%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%START OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME NOT LIKE '%END OF INVENTORY%'
AND HMIS.MP_INT_RTE_NAME <> 'BEGIN BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'END BRIDGE'
AND HMIS.MP_INT_RTE_NAME <> 'DIRECTIONAL CROSSOVER'
AND HMIS.MP_INT_RTE_NAME <> 'NIKE DR'
AND HMIS.MAIN_LINE = 1
end END_LIMIT;

begin SKID_CATEGORY
/* SKID_CATEGORY - not needed for optimization (skip)
    (This is used to create the friction mapping data for eGIS)
	Import this data into  Attribute SKID_CATEGORY
	Replace Network ID 1129 with the correct Network ID
	Add SPADJ_SKID_NUMBER_2015 and remove SPADJ_SKID_NUMBER_2009 - 
	SPADJ_SKID_NUMBER_2014,SPADJ_SKID_NUMBER_2012,SPADJ_SKID_NUMBER_2011,SPADJ_SKID_NUMBER_2010,SPADJ_SKID_NUMBER_2009
	Add SPADJ_SKID_CATEGORY_2015 and remove SPADJ_SKID_CATEGORY_2009 - 
	SPADJ_SKID_CATEGORY_2014,SPADJ_SKID_CATEGORY_2012,SPADJ_SKID_CATEGORY_2011,SPADJ_SKID_CATEGORY_2010,SPADJ_SKID_CATEGORY_2009 */
SELECT
  FACILITY as ROUTES,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  '06/30/2017' AS DATE_,
  CASE 
    WHEN AVG_SKID_NUM<30 THEN 1
    WHEN AVG_SKID_NUM<35 THEN 2
    WHEN AVG_SKID_NUM<40 THEN 3
    WHEN AVG_SKID_NUM<45 THEN 4
    ELSE 5 END DATA_
FROM    
  (SELECT
  GLOBAL_ROUTE_ID,	
  FACILITY,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  AVG(SPADJ_SKID_NUMBER) AS AVG_SKID_NUM, 
  STDDEV(SPADJ_SKID_NUMBER) AS STDDEV_SKID_NUM,
  COUNT(SPADJ_SKID_NUMBER) AS COUNT_SKID_NUM
FROM  
    (SELECT    
      UPV_SKID_NUM.YEAR_,
      SEC.FACILITY,      
      SEC.BEGIN_STATION,
      SEC.END_STATION,
      SEC.DIRECTION,
      SEG.GLOBAL_ROUTE_ID,    
      UPV_SKID_NUM.SPADJ_SKID_NUMBER,
      UPV_SKID_CAT.SPADJ_SKID_CATEGORY,
      SEG.LAST_YEAR
      FROM 
        SECTION_1129 SEC,
        SEGMENT_1129_NS0 SEG,    
     
      (SELECT SECTIONID, SUBSTR(COL, LENGTH(COL)-3,4) AS YEAR_, VALUE_ AS SPADJ_SKID_NUMBER FROM SEGMENT_1129_NS0 SEG
      UNPIVOT
      (
        VALUE_ FOR COL IN 
        (SPADJ_SKID_NUMBER_2014,SPADJ_SKID_NUMBER_2012,SPADJ_SKID_NUMBER_2011,SPADJ_SKID_NUMBER_2010,SPADJ_SKID_NUMBER_2009)
      )) UPV_SKID_NUM,
      
        (SELECT SECTIONID, SUBSTR(COL, LENGTH(COL)-3,4) AS YEAR_, VALUE_ AS SPADJ_SKID_CATEGORY FROM SEGMENT_1129_NS0 SEG
      UNPIVOT
      (
        VALUE_ FOR COL IN 
        (SPADJ_SKID_CATEGORY_2014,SPADJ_SKID_CATEGORY_2012,SPADJ_SKID_CATEGORY_2011,SPADJ_SKID_CATEGORY_2010,SPADJ_SKID_CATEGORY_2009)
      )) UPV_SKID_CAT 
        
      WHERE 
      SEC.SECTIONID = UPV_SKID_NUM.SECTIONID
      AND SEG.SECTIONID = UPV_SKID_NUM.SECTIONID
      AND SEC.SECTIONID = UPV_SKID_CAT.SECTIONID
      AND SEG.SECTIONID = UPV_SKID_CAT.SECTIONID) UPV_QRY
    
  WHERE YEAR_>=LAST_YEAR
  AND LAST_YEAR IS NOT NULL
  GROUP BY GLOBAL_ROUTE_ID,	
  FACILITY,
  BEGIN_STATION,
  END_STATION,
  DIRECTION
  
  UNION
  
SELECT
  GLOBAL_ROUTE_ID,	
  FACILITY,
  BEGIN_STATION,
  END_STATION,
  DIRECTION,
  AVG(SPADJ_SKID_NUMBER) AS AVG_SKID_NUM, 
  STDDEV(SPADJ_SKID_NUMBER) AS STDDEV_SKID_NUM,
  COUNT(SPADJ_SKID_NUMBER) AS COUNT_SKID_NUM
FROM  
    (SELECT    
      UPV_SKID_NUM.YEAR_,
      SEC.FACILITY,      
      SEC.BEGIN_STATION,
      SEC.END_STATION,
      SEC.DIRECTION,
      SEG.GLOBAL_ROUTE_ID,    
      UPV_SKID_NUM.SPADJ_SKID_NUMBER,
      UPV_SKID_CAT.SPADJ_SKID_CATEGORY,
      SEG.LAST_YEAR
      FROM 
        SECTION_1129 SEC,
        SEGMENT_1129_NS0 SEG,    
     
      (SELECT SECTIONID, SUBSTR(COL, LENGTH(COL)-3,4) AS YEAR_, VALUE_ AS SPADJ_SKID_NUMBER FROM SEGMENT_1129_NS0 SEG
      UNPIVOT
      (
        VALUE_ FOR COL IN 
        (SPADJ_SKID_NUMBER_2014,SPADJ_SKID_NUMBER_2012,SPADJ_SKID_NUMBER_2011,SPADJ_SKID_NUMBER_2010,SPADJ_SKID_NUMBER_2009)
      )) UPV_SKID_NUM,
      
        (SELECT SECTIONID, SUBSTR(COL, LENGTH(COL)-3,4) AS YEAR_, VALUE_ AS SPADJ_SKID_CATEGORY FROM SEGMENT_1129_NS0 SEG
      UNPIVOT
      (
        VALUE_ FOR COL IN 
        (SPADJ_SKID_CATEGORY_2014,SPADJ_SKID_CATEGORY_2012,SPADJ_SKID_CATEGORY_2011,SPADJ_SKID_CATEGORY_2010,SPADJ_SKID_CATEGORY_2009)
      )) UPV_SKID_CAT 
        
      WHERE 
      SEC.SECTIONID = UPV_SKID_NUM.SECTIONID
      AND SEG.SECTIONID = UPV_SKID_NUM.SECTIONID
      AND SEC.SECTIONID = UPV_SKID_CAT.SECTIONID
      AND SEG.SECTIONID = UPV_SKID_CAT.SECTIONID) UPV_QRY
    
  WHERE LAST_YEAR IS NULL
  GROUP BY GLOBAL_ROUTE_ID,	
  FACILITY,
  BEGIN_STATION,
  END_STATION,
  DIRECTION) AVG_SKID
  
ORDER BY 1,4,2
end SKID_CATEGORY;

begin FC_DENSITY
/* FC_DENSITY - created 08/29/17. Change GLOBAL_ROUTE_PAV later.
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi 
   Use this query for FC_DENSITY_SDV as well */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.FC_DENSITY*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)    
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      FC_DENSITY
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.FC_DENSITY >= 0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  FC_DENSITY AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.FC_DENSITY >= 0)
end FC_DENSITY	
	
begin SC_DENSITY
/* SC_DENSITY - created 08/29/17. Change GLOBAL_ROUTE_PAV later.
last imported 07/03/19 from pavconhist_assetdev.business_plan_100mmi 
   Use this query for SC_DENSITY_SDV as well */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.SC_DENSITY*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)   
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      SC_DENSITY
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.SC_DENSITY >= 0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  SC_DENSITY AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.SC_DENSITY >= 0)
end SC_DENSITY

begin LAST_PMAINT_TREATMENT
/* LAST_PMAINT_TREATMENT - last preventive maintenance treatment - created on 12/21/2017 and last imported on 07/27/2021 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
TREATMENT AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
    AND TRT.TYPE_OF_ACTIVITY = 'Preventive Maintenance'
	AND BPT.CONTRACT NOT LIKE '2%'
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
    AND TRT.TYPE_OF_ACTIVITY = 'Preventive Maintenance'
	AND BPT.CONTRACT NOT LIKE '2%'
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A
  WHERE TYPE_OF_ACTIVITY = 'Preventive Maintenance'
  AND CONTRACT NOT LIKE '2%'
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  
	  UNION --ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION,
TREATMENT
ORDER BY 1,4,2

end LAST_PMAINT_TREATMENT;

begin LAST_PMAINT_YEAR 
/* LAST_PMAINT_YEAR last preventive maintenance year - created on 12/21/2017 - Last Import 07/03/2019 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
MAX(BIRTH_YEAR) AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
	AND TRT.TYPE_OF_ACTIVITY = 'Preventive Maintenance'
	AND BPT.CONTRACT NOT LIKE '2%'
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
	AND TRT.TYPE_OF_ACTIVITY = 'Preventive Maintenance'
	AND BPT.CONTRACT NOT LIKE '2%'
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A  
  WHERE TYPE_OF_ACTIVITY = 'Preventive Maintenance'
  AND CONTRACT NOT LIKE '2%'
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  
	  UNION --ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION
ORDER BY 1,4,2

end LAST_PMAINT_YEAR;

begin LAST_MAINT_YEAR
/* LAST_MAINT_YEAR – new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 07/27/2021 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
MAX(BIRTH_YEAR) AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
	AND CONTRACT LIKE '2%'
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
	AND CONTRACT LIKE '2%'
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A  
  WHERE CONTRACT LIKE '2%' -- contract starts with 2 for maintenance treatment
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  
	  UNION -- ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION
ORDER BY 1,4,2
end LAST_MAINT_YEAR;

begin LAST_REHAB_YEAR
/* LAST_REHAB_YEAR – new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 07/27/2021 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
MAX(BIRTH_YEAR) AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
	AND TRT.TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
	AND TRT.TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A  
  WHERE TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  
	  UNION --ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION
ORDER BY 1,4,2
end LAST_REHAB_YEAR;

begin LAST_MAINT_TREATMENT 
/* LAST_MAINT_TREATMENT – new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 07/27/21 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
TREATMENT AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
    AND CONTRACT LIKE '2%'
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
    AND CONTRACT LIKE '2%'
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A
  WHERE CONTRACT LIKE '2%' -- contract starts with 2 for maintenance treatment
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  
	  UNION -- ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1)
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION,
TREATMENT
ORDER BY 1,4,2
end LAST_MAINT_TREATMENT;

begin LAST_REHAB_TREATMENT 
/* LAST_REHAB_TREATMENT – new query from pavconhist_prod.BUSINESS_PLAN_TREATMENTS - last imported 07/27/2021 */
SELECT
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
TREATMENT AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
    AND TRT.TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
	AND BPT.BIRTH_YEAR NOT IN ('2099','UNKNOWN')
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
    AND TRT.TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
	AND BPT.BIRTH_YEAR NOT IN ('2099','UNKNOWN')
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A
  WHERE TYPE_OF_ACTIVITY in ('Minor Rehabilitation','Major Rehabilitation','Structural Overlay','Reconstruction')
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
      AND BPT.OUTER_LANE = 1
	  AND BPT.BIRTH_YEAR NOT IN ('2099','UNKNOWN')
	  
	  UNION --ramps
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
      AND BPT.OUTER_LANE = 1
	  AND BPT.BIRTH_YEAR NOT IN ('2099','UNKNOWN'))
)              
GROUP BY ROUTES, 
BEGIN_STATION, 
END_STATION, 
DIRECTION,
TREATMENT
ORDER BY 1,4,2
end LAST_REHAB_TREATMENT;

begin PAVED_AREA_SY
/* PAVED_AREA_SY - skip - PAVED AREA IN SQUARE YARDS FROM PAVCONHIST_ASSETDEV.SECTION_TABLE - last imported 08/03/16 */
SELECT INV.FACILITY ROUTES,
  SEC.INV_BMP AS BEGIN_STATION,
  SEC.INV_EMP AS END_STATION,
  INV.DIRECTION,
  '06/30/2017' AS DATE_,
  SUM((SEC.SECTION_LENGTH*5280/3)*((SEC.THRU_LANE_WIDTH + SEC.AUX_LANE_WIDTH + SEC.SHLD_WIDTH)/3)) AS DATA_
FROM RC_SECTION_MVIEW INV
 INNER JOIN SECTION_TABLE SEC
ON INV.ROUTEID = SEC.ROUTEID
WHERE SEC.GOVT_CONTROL = 1 
AND SEC.HMIS_YEAR = 2016 
AND SEC.FACILITY_TYPE IN (1,2)
  GROUP BY 
  INV.FACILITY,
  SEC.INV_BMP,
  SEC.INV_EMP,
  INV.DIRECTION
end PAVED_AREA_SY  ;

begin END_LAT_LONG	
/* END_LAT_LONG - most recent tenth mile GPS data 
First populate RC_SECTION_VIEW_TABLE@pav_conhist_assetdev with this data from RC - networkid subject to change every year */
select 
    rownum as order_id,
    sec.facility as routes,
    sec.begin_station,
    sec.end_station,
    sec.direction,
    to_number(seg.global_route_id) as global_route_id,
    seg.routeid,
    seg.hmis_routeid,
    seg.sub_route_id,
    to_number(seg.govt_control) as govt_control,
    seg.proposed,
    seg.main_line,
    to_number(seg.simdiv) as simdiv
    from segment_1931_ns0 seg
    inner join section_1931 sec 
    on sec.sectionid = seg.sectionid;

SELECT 
RC.ROUTES
,RC.END_STATION-0.001 AS BEGIN_STATION
,RC.END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GISPUB.LATITUDE||','||GISPUB.LONGITUDE AS DATA_
FROM SHA_PNTS_RTES_MD_1000TH@GISPUB_LINK.PROD.HISD.SHA GISPUB
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GISPUB.ROUTEID = RC.HMIS_ROUTEID
AND GISPUB.ID_MP=RC.END_STATION
AND SUBSTR(RC.HMIS_ROUTEID,15,2)<>'09'
AND RC.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.BEGINNING_MILEPOINT-0.001 AS BEGIN_STATION  
,GS.BEGINNING_MILEPOINT AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.BEGINNING_MILEPOINT>RC.BEGIN_STATION
AND GS.BEGINNING_MILEPOINT<RC.END_STATION
AND MOD(GS.BEGINNING_MILEPOINT,0.1)=0
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.REVERSE_MILEPOINT-0.001 AS BEGIN_STATION  
,GS.REVERSE_MILEPOINT AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.REVERSE_MILEPOINT>RC.BEGIN_STATION
AND GS.REVERSE_MILEPOINT<RC.END_STATION
AND MOD(GS.REVERSE_MILEPOINT,0.1)=0
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 2

UNION
SELECT 
RC.ROUTES
,GS.BEGINNING_MILEPOINT-0.001 AS BEGIN_STATION  
,GS.BEGINNING_MILEPOINT AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.BEGINNING_MILEPOINT=RC.END_STATION
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.REVERSE_MILEPOINT-0.001 AS BEGIN_STATION  
,GS.REVERSE_MILEPOINT AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE round(GS.REVERSE_MILEPOINT,2)=round(RC.END_STATION,2)
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 2
end END_LAT_LONG;

begin BEGIN_LAT_LONG
/* BEGIN_LAT_LONG - most recent tenth mile GPS data 
First populate RC_SECTION_VIEW_TABLE@pav_conhist_assetdev */

SELECT 
RC.ROUTES
,RC.BEGIN_STATION
,RC.BEGIN_STATION+0.001 AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GISPUB.LATITUDE||','||GISPUB.LONGITUDE AS DATA_
FROM SHA_PNTS_RTES_MD_1000TH@GISPUB_LINK.PROD.HISD.SHA GISPUB
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GISPUB.ROUTEID = RC.HMIS_ROUTEID
AND GISPUB.ID_MP=RC.BEGIN_STATION
AND SUBSTR(RC.HMIS_ROUTEID,15,2)<>'09'
AND RC.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.BEGINNING_MILEPOINT AS BEGIN_STATION  
,GS.BEGINNING_MILEPOINT+0.001 AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.BEGINNING_MILEPOINT>RC.BEGIN_STATION
AND GS.BEGINNING_MILEPOINT<RC.END_STATION
AND MOD(GS.BEGINNING_MILEPOINT,0.1)=0
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.REVERSE_MILEPOINT AS BEGIN_STATION  
,GS.REVERSE_MILEPOINT+0.001 AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.REVERSE_MILEPOINT>RC.BEGIN_STATION
AND GS.REVERSE_MILEPOINT<RC.END_STATION
AND MOD(GS.REVERSE_MILEPOINT,0.1)=0
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 2

UNION
SELECT 
RC.ROUTES
,GS.BEGINNING_MILEPOINT AS BEGIN_STATION  
,GS.BEGINNING_MILEPOINT+0.001 AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE GS.BEGINNING_MILEPOINT=RC.END_STATION
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 1

UNION
SELECT 
RC.ROUTES
,GS.REVERSE_MILEPOINT AS BEGIN_STATION  
,GS.REVERSE_MILEPOINT+0.001 AS END_STATION
,RC.DIRECTION
,'06/30/2017' AS DATE_
,GS.LATITUDE||','||GS.LONGITUDE AS DATA_
FROM GLOBAL_SEGMENT_PAV GS
INNER JOIN RC_SECTION_VIEW_TABLE@pav_conhist_assetdev  RC ON
GS.GLOBAL_ROUTE_ID = RC.GLOBAL_ROUTE_ID
AND GS.SUB_ROUTE_ID = RC.SUB_ROUTE_ID
WHERE round(GS.REVERSE_MILEPOINT,2)=round(RC.BEGIN_STATION,2)
AND GS.LATITUDE IS NOT NULL
AND GS.SUB_ROUTE_ID = 2
;
end BEGIN_LAT_LONG;

begin LAST_TREATMENT
/* LAST_TREATMENT - created on 11-01/2017, imported on 07/27/2021 */
SELECT DISTINCT 
ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/2020' AS DATE_,
TREATMENT AS DATA_
FROM
(
  (WITH A AS 
    (SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT@pav_conhist_assetdev TRT
    WHERE  UPPER(BPT.TREATMENT) = UPPER(TRT.TREATMENT)
    AND BPT.TREATMENT NOT IN ('UNKNOWN','SLURRY SEAL')
    AND BPT.OUTER_LANE = 1    
	AND CONTRACT NOT LIKE '2%' --no pothole patching
    UNION
    SELECT * FROM BUSINESS_PLAN_TREATMENTS BPT, LU_TREATMENT@pav_conhist_assetdev TRT
    WHERE  UPPER(BPT.TREATMENT) = 'SLURRY SEAL'
    AND UPPER(TRT.TREATMENT) = 'MICRO SURFACING'
    AND BPT.OUTER_LANE = 1
	AND CONTRACT NOT LIKE '2%' --no pothole patching
     ),
  B AS (SELECT SECTION_ID,
  MAX(ID_) MAX_ID 
  FROM A  
  GROUP BY SECTION_ID)             
	  SELECT BPT.COUNTY 
	  ||'-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  ||BPT.ID_RTE_NO 
	  ||BPT.MP_SUFFIX AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NULL
    AND BPT.OUTER_LANE = 1
	  
	  UNION
	  
	  SELECT BPT.COUNTY 
	  || '-' 
	  ||BPT.ASSOCIATED_ID_PREFIX 
	  || ' ' 
	  || BPT.ID_RTE_NO 
	  || BPT.MP_SUFFIX  
	  ||' RP' 
	  || BPT.RAMP_NUMBER 
	  ||'-'
	  ||BPT.EXIT_NUMBER AS ROUTES,
	  BPT.BMP AS BEGIN_STATION,
	  BPT.EMP AS END_STATION,
	  BPT.DIRECTION,
	  BPT.BIRTH_YEAR,
	  BPT.TREATMENT
	  FROM BUSINESS_PLAN_TREATMENTS BPT
	  INNER JOIN B ON B.SECTION_ID = BPT.SECTION_ID
	  AND B.MAX_ID = BPT.ID_
	  WHERE BPT.EXIT_NUMBER IS NOT NULL
    AND BPT.OUTER_LANE = 1
    )
) 
ORDER BY 1,4,2
end LAST_TREATMENT;

begin TOTAL_PAVEMENT_WIDTH
SELECT 
    B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
      ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP       AS BEGIN_STATION,
      INV_EMP       AS END_STATION,
      G.DIRECTION,
      '06/30/2017' AS DATE_,
      THRU_LANE_WIDTH+ AUX_LANE_WIDTH+SHLD_WIDTH+
      CASE WHEN MEDIAN_TYPE IN (5,7) THEN MEDIAN_WIDTH ELSE  0 END DATA_
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR  = 2017
    AND B.ROUTE  <> 'RP'
    UNION
    SELECT 
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION,
     '06/30/2017' AS DATE_,      
     THRU_LANE_WIDTH+ AUX_LANE_WIDTH+SHLD_WIDTH+
      CASE WHEN MEDIAN_TYPE IN (5,7) THEN MEDIAN_WIDTH ELSE  0 END TOTAL_PAVEMENT_WIDTH
    FROM BUSINESS_PLAN_100MMI B 
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    AND B.REPORTING_YEAR  = 2017
    AND B.ROUTE = 'RP'	
	ORDER BY ROUTES, DIRECTION, BEGIN_STATION
	
end TOTAL_PAVEMENT_WIDTH;

begin EVENT_PAVE_CHANGE
/* Update table RC_PAV_CHANGE in Oracle and then import data for 2017 
   To update table RC_PAV_CHANGE, run package PAV_CHANGE_OFFICE_EVENT in Assetdev. 
   Make sure that the source table PAV_CHANGE_OFFICE is updated before running the package */
SELECT RC.FACILITY AS ROUTES, 
ROUND(PC.INV_BMP,2) AS BEGIN_STATION, ROUND(PC.INV_EMP,2) AS END_STATION, RC.DIRECTION, 
'06/30/2017' AS DATE_,
PC.EVENT_PAVE_CHANGE_OFFICE AS DATA_
FROM RC_PAV_CHANGE PC INNER JOIN RC_SECTION_MVIEW RC 
ON RC.GLOBAL_ROUTE_ID = PC.GLOBAL_ROUTE_ID
AND RC.SUB_ROUTE_ID = PC.SUB_ROUTE_ID

end EVENT_PAVE_CHANGE;


Begin SC_RSL
/* SCD_RSL - created 07/20/19. 
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.SCD_RSL*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)   
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      SCD_RSL
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.SCD_RSL >= 0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  SCD_RSL AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.SCD_RSL >= 0)
End SC_RSL;


begin FCD_RSL
/* FC_RSL - created 07/20/19. 
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.FCD_RSL*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)    
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      FCD_RSL
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.FCD_RSL >= 0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  FCD_RSL AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.FCD_RSL >= 0)
End FC_RSL;


begin RUT_RSL
/* FC_RSL - created 07/23/19. 
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.RUT_RSL*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)    
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      RUT_RSL
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.RUT_RSL >= 0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  RUT_RSL AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.RUT_RSL >= 0)
End RUT_RSL;


begin SKID_RSL
/* SKID_RSL - created 07/23/19. 
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.SKID_RSL*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)    
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      SKID_RSL
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.SKID_RSL >= 0 and (INV_EMP-INV_BMP)>0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  SKID_RSL AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.SKID_RSL >= 0)
End SKID_RSL;


begin RSL
/* RSL - created 07/23/19. 
   last imported 07/27/21 from pavconhist_assetdev.business_plan_100mmi */
SELECT ROUTES,
BEGIN_STATION,
END_STATION,
DIRECTION,
'06/30/' || REPORTING_YEAR AS DATE_,
DATA_
FROM
  (SELECT A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION,
    ROUND(SUM(C.RSL*C.MILES)/SUM(C.MILES),2) AS DATA_
  FROM
    (
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ROUTE
      ||' '
     ||RNUM
      ||TRIM(RSUFF) AS ROUTES,
      INV_BMP AS BEGIN_STATION,
      INV_EMP AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.MEDIAN_TYPE IN (4,5)
    AND B.ROUTE <> 'RP'    
    AND G.IS_INVENTORY_DIRECTION = 1    
    UNION
    SELECT B.REPORTING_YEAR,
      B.GLOBAL_ROUTE_ID,
      B.COUNTY
      ||'-'
      ||B.ASSOCIATED_ID_PREFIX
      ||' '
      ||RNUM
      ||TRIM(RSUFF)
      ||' RP'
      ||B.RAMP_NUMBER
      ||'-'
      ||B.EXIT_NUMBER AS ROUTES,
      INV_BMP         AS BEGIN_STATION,
      INV_EMP         AS END_STATION,
      G.DIRECTION
    FROM BUSINESS_PLAN_100MMI B
    INNER JOIN GLOBAL_ROUTE_PAV G
    ON B.GLOBAL_ROUTE_ID = G.GLOBAL_ROUTE_ID
    AND B.SUB_ROUTE_ID = G.SUB_ROUTE_ID
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)    
    AND B.ROUTE = 'RP'
    AND G.IS_INVENTORY_DIRECTION = 1
    ) A
  LEFT OUTER JOIN
    (SELECT B.REPORTING_YEAR,
      GLOBAL_ROUTE_ID,
      INV_BMP AS BEGIN_STATION,
      (INV_EMP-INV_BMP) MILES,
      RSL
    FROM BUSINESS_PLAN_100MMI B
    WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
    AND B.RSL >= 0 and (INV_EMP-INV_BMP)>0
    ) C
  ON A.REPORTING_YEAR    = C.REPORTING_YEAR
  AND A.GLOBAL_ROUTE_ID  = C.GLOBAL_ROUTE_ID
  WHERE C.BEGIN_STATION  >= A.BEGIN_STATION
  AND C.BEGIN_STATION    < A.END_STATION
  GROUP BY A.REPORTING_YEAR,
    A.ROUTES,
    A.BEGIN_STATION,
    A.END_STATION,
    A.DIRECTION
	UNION
	SELECT B.REPORTING_YEAR,
	  B.COUNTY
	  ||'-'
	  ||B.ROUTE
	  ||' '
	  ||RNUM
	  ||TRIM(RSUFF) AS ROUTES,
	  INV_BMP       AS BEGIN_STATION,
	  INV_EMP       AS END_STATION,
	  B.DIRECTION,
	  RSL AS DATA_
	FROM BUSINESS_PLAN_100MMI B
		WHERE B.REPORTING_YEAR in (2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)
		AND B.MEDIAN_TYPE NOT IN (4,5)
		AND B.ROUTE <> 'RP'
		AND B.RSL >= 0)
End RSL;